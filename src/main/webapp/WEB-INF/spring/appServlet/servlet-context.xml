<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	
	<!--  
	SpringMVC 로 요청이 들어오면 제일먼저 DispatcherServlet이 요청을 받는다.
	그리고 아래 설정된 기본패키지를 검색(scan) 한후 @Controller어노테이션이 설정된
	클래스의 요청명이 매핑된 메소드를 찾아 실행한다.
	-->
	<context:component-scan base-package="com.kosmo.k10spring" />
	<!--  
	SpringMVC가 시작될때 위의 기본 패키지 외에 아래도 같이 스캔하게 설정한다.
	스캔시 컨트롤러, 서비스, 리파지토리 동의 객체를 찾아서 요청을 처리하거나
	빈을 생성한다.
	-->
	<context:component-scan base-package="component.scan" />
	<!--  
	Spring Framework에서 이미지나 js, css파일등의 리소스를
	사용하기 위해 생성된 폴더이다. views폴더 하위에는 jsp만 생성해야하고 
	모든 리소스 파일은 여기에 저장해야 한다.
	-->
	<resources mapping="/res/**" location="/resources/" />
	<resources mapping="/images/**" location="/resources/" />
	<resources mapping="/common/**" location="/resources/" />

	<!--  
	컨트롤러에서 비즈니스로직을 수행한 후 View의 경로를 반환하면
	ViewResolver가 해당 뷰의 경로를 아래와 같이 조립한다.
	[prefix]   					   [suffix]
	/WEB-INF/views/ + 컨트롤러 반환값 + .jsp
	이와깉이 조립한 후 웹브라우저에 해당 view를 로드한다.
	컨트롤러에서는 View를 호출하기 전 출력할 내용을 Model객체에 저장한다.
	-->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	
	<!-- 파일업로드를 위한 빈 생성 -->
	<beans:bean id="multipartResolver" 
	class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="1000000"/>
	</beans:bean>
	<!-- 파일다운로드 빈 생성 -->
	<beans:bean id="fileDownloadView" class="common.FileDownLoadView"/>
	<!-- 파일다운로드시 상단의 ViewResolver보다 먼저 동작하도록 우선순위(order)를
	높게 설정한다. 따라서 파일 다운로드시 뷰가 화면에 출력되지 않도록한다. -->
	<beans:bean id="fileViewResolver"
	class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="0"/>
	</beans:bean>
	
	<!-- 트랜잭션 처리를 위한 빈 생성 -->
	
	<!-- 1.트랜잭션 메니져를 이용한 처리
		dataSource : DB연결정보
		template : JdbcTemplate타입의 빈
		transactionManager : 트랜잭션 메니져 타입의 빈
		transactionDAO : 위3개의 빈을 기반으로 최종적으로 생성한 빈으로 
			실제 트랜젝션 처리를 하게된다.
	 -->	
	<!-- <beans:bean name="dataSource" 
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="oracle.jdbc.OracleDriver" />
		<beans:property name="url" value="jdbc:oracle:thin:@localhost:1521:orcl" />
		<beans:property name="username" value="kosmo" />
		<beans:property name="password" value="1234" />
	</beans:bean>
	<beans:bean name="template" class="org.springframework.jdbc.core.JdbcTemplate">
		<beans:property name="dataSource" ref="dataSource" />
	</beans:bean>
	<beans:bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource"/>
	</beans:bean>
	<beans:bean name="transactionDAO" class="transaction.TicketDAO">
		<beans:property name="template" ref="template"/>
		<beans:property name="transactionManager" ref="transactionManager"/>
	</beans:bean> -->
	
	<!-- 2.트랜잭션 템플릿을 이용하기 위한 빈 생성 
	dataSource -> transactionManager -> transactionTemplate
		└> template  ->     TransactionDAO   <┘
	-->
	<beans:bean name="dataSource" 
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="oracle.jdbc.OracleDriver" />
		<beans:property name="url" value="jdbc:oracle:thin:@localhost:1521:orcl" />
		<beans:property name="username" value="kosmo" />
		<beans:property name="password" value="1234" />
	</beans:bean>
	<beans:bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource"/>
	</beans:bean>
	<beans:bean name="transactionTemplate"
	class="org.springframework.transaction.support.TransactionTemplate">
	<beans:property name="transactionManager" ref="transactionManager" />
	</beans:bean>
	<beans:bean name="template" 
		class="org.springframework.jdbc.core.JdbcTemplate">
		<beans:property name="dataSource" ref="dataSource" />
	</beans:bean> 
	<beans:bean name="TransactionDAO" class="transaction.TicketTplDAO">
		<beans:property name="template" ref="template" />
		<beans:property name="transactionTemplate" 
			ref="transactionTemplate" />
	</beans:bean>
	
	
</beans:beans>
